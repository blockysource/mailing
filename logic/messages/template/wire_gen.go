// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package emailtemplate

import (
	"github.com/sirupsen/logrus"

	"github.com/blockysource/blocky/pkg/go/providers"
	"github.com/blockysource/blocky/services/mailing/internal/deps"
	"github.com/blockysource/blocky/services/mailing/public/mailing"
	mailprovidermanager "github.com/blockysource/mailing/logic/mailprovider/manager"
)

// Injectors from wire.go:

// NewManager creates a new Manager.
func NewManager(d *mailing.Dependencies, pm *mailprovidermanager.Manager) (*Manager, error) {
	emailtemplateTemplateBTree := newTemplateBTree()
	moduleName := _wireModuleNameValue
	logger, err := deps.GetLogrusLogger(d)
	if err != nil {
		return nil, err
	}
	fields := _wireFieldsValue
	entry, err := providers.FieldsLogrusEntry(moduleName, logger, fields)
	if err != nil {
		return nil, err
	}
	config, err := deps.GetConfig(d)
	if err != nil {
		return nil, err
	}
	templateConfig, err := deps.GetTemplateConfig(config)
	if err != nil {
		return nil, err
	}
	manager := &Manager{
		templates: emailtemplateTemplateBTree,
		pm:        pm,
		log:       entry,
		cfg:       templateConfig,
	}
	return manager, nil
}

var (
	_wireModuleNameValue = deps.ModuleName
	_wireFieldsValue     = logrus.Fields{
		"part": "email-template-manager",
	}
)

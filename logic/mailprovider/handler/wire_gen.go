// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package mailproviderhandler

import (
	"github.com/sirupsen/logrus"

	"github.com/blockysource/blocky/pkg/go/providers"
	"github.com/blockysource/blocky/services/mailing/internal/deps"
	"github.com/blockysource/blocky/services/mailing/internal/persistence"
	"github.com/blockysource/blocky/services/mailing/public/mailing"
	mailproviderevents "github.com/blockysource/mailing/logic/mailprovider/events"
	mailprovidermanager "github.com/blockysource/mailing/logic/mailprovider/manager"
)

// Injectors from wire.go:

// NewHandler creates a new Handler.
func NewHandler(dependencies *mailing.Dependencies, publisher mailproviderevents.Publisher, mailingProviderStorage persistence.MailingProviderStorage, manager *mailprovidermanager.Manager, serviceNonce providers.ServiceNonce) (*Handler, error) {
	moduleName := _wireModuleNameValue
	logger, err := deps.GetLogrusLogger(dependencies)
	if err != nil {
		return nil, err
	}
	fields := _wireFieldsValue
	entry, err := providers.FieldsLogrusEntry(moduleName, logger, fields)
	if err != nil {
		return nil, err
	}
	handler := &Handler{
		p:   mailingProviderStorage,
		m:   manager,
		log: entry,
		ep:  publisher,
		n:   serviceNonce,
	}
	return handler, nil
}

var (
	_wireModuleNameValue = deps.ModuleName
	_wireFieldsValue     = logrus.Fields{
		"part": "mailproviderhandler",
		"type": "handler",
	}
)

func NewEventHandler(dependencies *mailing.Dependencies, mailingProviderStorage persistence.MailingProviderStorage, manager *mailprovidermanager.Manager, serviceNonce providers.ServiceNonce) (*EventsHandler, error) {
	moduleName := _wireProvidersModuleNameValue
	logger, err := deps.GetLogrusLogger(dependencies)
	if err != nil {
		return nil, err
	}
	fields := _wireLogrusFieldsValue
	entry, err := providers.FieldsLogrusEntry(moduleName, logger, fields)
	if err != nil {
		return nil, err
	}
	eventsHandler := &EventsHandler{
		m:   manager,
		p:   mailingProviderStorage,
		n:   serviceNonce,
		log: entry,
	}
	return eventsHandler, nil
}

var (
	_wireProvidersModuleNameValue = deps.ModuleName
	_wireLogrusFieldsValue        = logrus.Fields{
		"part": "mailproviderhandler",
		"type": "eventhandler",
	}
)
